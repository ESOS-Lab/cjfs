<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE refentry PUBLIC "-//Samba-Team//DTD DocBook V4.2-Based Variant V1.0//EN" "http://www.samba.org/samba/DTD/samba-doc">
<refentry id="dbench.1">

<refmeta>
	<refentrytitle>dbench</refentrytitle>
	<manvolnum>1</manvolnum>
</refmeta>


<refnamediv>
	<refname>dbench</refname>
        <refpurpose>a benchmark tool</refpurpose>
</refnamediv>

<refsynopsisdiv>
	<cmdsynopsis>
		<command>dbench [OPTIONS] &lt;num-procs&gt;</command>
	</cmdsynopsis>
	
	<cmdsynopsis>
		<command>dbench</command>
		<arg choice="opt">-B --backend=&lt;dbench backend&gt;</arg>
		<arg choice="opt">-c --loadfile=&lt;filename&gt;</arg>
		<arg choice="opt">-D --directory=&lt;string&gt;</arg>
		<arg choice="opt">-F --fsync</arg>
		<arg choice="opt">-R --target-rate=&lt;double&gt;</arg>
		<arg choice="opt">-s --sync</arg>
		<arg choice="opt">-S --sync-dir</arg>
		<arg choice="opt">-t --timelimit=&lt;integer&gt;</arg>
		<arg choice="opt">-T --tcp-options=&lt;string&gt;</arg>
		<arg choice="opt">--run-once</arg>
		<arg choice="opt">--fake-io</arg>
		<arg choice="opt">--scsi=&lt;scsi-device&gt;</arg>
		<arg choice="opt">--server=&lt;hostname&gt;</arg>
		<arg choice="opt">--export=&lt;string&gt;</arg>
		<arg choice="opt">--protocol=&lt;string&gt;</arg>
		<arg choice="opt">--clients-per-process=&lt;integer&gt;</arg>
		<arg choice="opt">--trunc-io=&lt;integer&gt;</arg>
		<arg choice="opt">--stat-check</arg>
		<arg choice="opt">--skip-cleanup</arg>
		<arg choice="opt">--per-client-results</arg>
		<arg choice="opt">--iscsi-device=&lt;iSCSI URL&gt;</arg>
		<arg choice="opt">--iscsi-initiatorname=&lt;iSCSI InitiatorName&gt;</arg>

		<arg choice="opt">-? --help</arg>
		<arg choice="opt">--usage</arg>
	</cmdsynopsis>
	
</refsynopsisdiv>



  <refsect1><title>DESCRIPTION</title>
    <para>
      dbench is a utility to benchmark a system based on client workload
      profiles.
    </para>
  </refsect1>


  <refsect1> <title>STANDARD OPTIONS</title>

    <refsect2><title>-B --backend=&lt;dbench backend&gt;</title>
      <para>
      The backend type specifies which kind of commandset and what kind of
      tests that dbench will perform. The backend type specifies which
      kind of loadfile that can be used.
      </para>

      <para>
      There are currently six types of backends : "fileio", "sockio", "nfs", "scsi", "iscsi" and "smb". The default is "fileio" which uses a smbtorture/BENCH-NBENCH style loadfile.
      </para>
    </refsect2>

    <refsect2><title>-c --loadfile=&lt;filename&gt;</title>
      <para>
      This specifies the name of the loadfile to use. The loadfile describes
      the sequence and timing of operations that dbench will issue.
      </para>
    </refsect2>

    <refsect2><title>-D --directory=&lt;string&gt;</title>
      <para>
      This controls which directory that dbench will use as the root for when
      running the loadfile. This defaults to "." which refers to the current
      directory for the "fileio" and "sockio" backends and the root of the
      export for the "nfs" backend.
      </para>
    </refsect2>

    <refsect2><title>-R --target-rate=&lt;double&gt;</title>
      <para>
      By default dbench will try to replay the loadfile and keep the same
      rate as the original application the loadfile was captured from.
      Using this option it is possible to run the load file faster/slower
      than in the original capture.
      </para>

      <para>
      The argument is specified in MByte/second. dbench tries to match this
      target rate by dynamically increasing/decreasing the delays beteen
      the inidvidual opertaions in the loadfile. These calculations only
      take the READ and WRITE operations of the loadfile into account
      so this may not work reliable for loadfiles with very few READ/WRITE
      operations.
      </para>

      <para>
      By setting this limit to something very large, such as 999999.99 you can
      effectively tell dbench to "run this loadfile as fast as possible".
      </para>

    </refsect2>

    <refsect2><title>-t --timelimit=&lt;integer&gt;</title>
      <para>
      How long to run the test for.
      </para>
    </refsect2>

    <refsect2><title>--run-once</title>
      <para>
      Only run the loadfile once and stop when the end of the loadfile is
      reached.
      </para>
      <para>
      The default for dbench is to wrap the loadfile when the end is
      reached and continue running the loadfile over and over until the
      timelimit is reached.
      </para>
    </refsect2>

    <refsect2><title>--clients-per-process=&lt;integer&gt;</title>
      <para>
      By default dbench will fork one child process for each client emulated.
      Using this option dbench will run multiple emulated clients inside
      each process.
      </para>

      <para>
      This is useful for testing how performance differs between the case
      of n processes with one thread of I/O each and one process with n threads
      of I/O.
      </para>
    </refsect2>

    <refsect2><title>--skip-cleanup</title>
      <para>
      Do not cleanup and delete all temporary files in the clients work
      directory when the test ends.
      </para>
    </refsect2>

    <refsect2><title>--per-client-results</title>
      <para>
      When the test is finished print a latency report for each inidvidual
      client in addition to the aggregated report over all clients.
      </para>
    </refsect2>

  </refsect1>

  <refsect1> <title>FILEIO OPTIONS</title>
    <refsect2><title>-F --fsync</title>
      <para>
      This option only apply to the "fileio" backend.
      </para>

      <para>
      This will make dbench perform a fsync() to the file after each write
      operation.
      </para>
    </refsect2>

    <refsect2><title>-s --sync-open</title>
      <para>
      This option only apply to the "fileio" backend.
      </para>

      <para>
      This makes dbench override the loadfile and use O_SYNC for all 
      file open operations.
      </para>
    </refsect2>

    <refsect2><title>-S --sync-dir</title>
      <para>
      This option only apply to the "fileio" backend.
      </para>

      <para>
      Call fsync() on the directory after each "unlink", "rmdir" or "rename"
      operation. This emulates how the linux kernel nfs daemon syncs
      directories after performing directory modifying operations.
      </para>
    </refsect2>

    <refsect2><title>--fake-io</title>
      <para>
      This option only apply to the "fileio" backend.
      </para>

      <para>
      Do not do any file read/write operations at all.
      </para>
    </refsect2>

    <refsect2><title>--stat-check</title>
      <para>
      This option only apply to the "fileio" backend.
      </para>

      <para>
      After each create/mkdir/rmdir/rename operation, immediately try to
      stat() the object affected and verify that the return code from stat()
      is correct. I.e. Verify that immediately after we have created an
      object that stat() will succeed and that immediately after we have
      deleted an object that stat() will fail.
      </para>
    </refsect2>

  </refsect1>

  <refsect1> <title>SOCKIO OPTIONS</title>
    <refsect2><title>-T --tcp-options=&lt;string&gt;</title>
      <para>
      This option only apply to the "sockio" backend.
      </para>
    </refsect2>


  </refsect1>

  <refsect1> <title>SMB OPTIONS</title>
    <refsect2><title>--smb-share=//&lt;hostname&gt;/&lt;share&gt;[/&lt;path&gt;]</title>
      <para>
      This option only apply to the "smb" backend.
      </para>

      <para>
      This option is mandatory when the "smb" backend is used.
      </para>

      <para>
      This specifies the server and the share to use for the testing. It also contains an optional path to a directory to use.
      </para>
      <para>
	Example: --smb-share=//MY-SERVER/DATA
      </para>
    </refsect2>

    <refsect2><title>--smb-user=[&lt;domain&gt;/]&lt;user&gt;%&lt;password&gt;</title>
      <para>
      This option only apply to the "smb" backend.
      </para>

      <para>
      This option is mandatory when the "smb" backend is used.
      </para>

      <para>
      This specifies the username and password to use when authenticationg to the server.
      </para>
      <para>
	Example: --smb-user=Administrator%Password
      </para>
    </refsect2>
  </refsect1>

  <refsect1> <title>NFS OPTIONS</title>
    <refsect2><title>--server=&lt;hostname&gt;</title>
      <para>
      This option only apply to the "nfs" backend.
      </para>

      <para>
      This option is mandatory when the "nfs" backend is used.
      </para>

      <para>
      This specifies the host-name or ip-address of the server to test.
      </para>
    </refsect2>

    <refsect2><title>--export=&lt;string&gt;</title>
      <para>
      This option only apply to the "nfs" backend.
      </para>

      <para>
      This option is mandatory when the "nfs" backend is used.
      </para>

      <para>
      This specifies the nfs-export on the server to do i/o to.
      </para>
    </refsect2>

    <refsect2><title>--protocol=&lt;string&gt;</title>
      <para>
      This option only apply to the "nfs" backend.
      </para>

      <para>
      This specifies whether "tcp" or "udp" is to be used. Default is "tcp".
      </para>
    </refsect2>

    <refsect2><title>--trunc-io=&lt;integer&gt;</title>
      <para>
      This option only apply to the "nfs" backend.
      </para>

      <para>
      Some NFS server may have limitations on how large READ/WRITE I/Os they
      accept preventing some loadfiles from running. Using this option will
      override the length specified in the loadfile and make dbench never
      issuing any READ/WRITE operations larger than this.
      </para>
    </refsect2>
  </refsect1>

  <refsect1> <title>SCSI OPTIONS</title>
    <refsect2><title>--scsi=&lt;scsi-device&gt;</title>
      <para>
      This option only apply to the "scsi" backend.
      </para>

      <para>
      This option is mandatory when the "scsi" backend is used.
      </para>

      <para>
      This specifies the device node of the scsi-device we want to run the loadfile on. Example: --scsi=/dev/sda
      </para>
    </refsect2>
  </refsect1>

  <refsect1> <title>iSCSI OPTIONS</title>
    <para>
    Dbench contains a primitive iSCSI initiator, allowing it to perform I/O
    to some iSCSI targets.
    </para>
    <refsect2><title>--iscsi-device=&lt;iSCSI URL&gt;</title>
      <para>
      This option only apply to the "iscsi" backend.
      </para>

      <para>
      This option is mandatory when the "iscsi" backend is used.
      </para>

      <para>
      This specifies the URL to the target device. URLs are specified as "iscsi://&lt;ip-address&gt;[:&lt;port&gt;]/&lt;target-iqn&gt;/&lt;lun&gt;"
      </para>
    </refsect2>
    <refsect2><title>--iscsi-initiatorname=&lt;iSCSI InitiatorName&gt;</title>
      <para>
      This option only apply to the "iscsi" backend.
      </para>

      <para>
      This option is optional when the "iscsi" backend is used.
      </para>

      <para>
      This specifies the InitiatorName that dbench will use when connecting to the client.
      </para>
    </refsect2>
  </refsect1>


  <refsect1><title>COPYRIGHT/LICENSE</title>
<literallayout>
Copyright (C) Andrew Tridgell 2008
Copyright (C) Ronnie Sahlberg 2008

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, see http://www.gnu.org/licenses/.
</literallayout>
  </refsect1>
</refentry>
